{"version":3,"sources":["components/FindMovie/FindMovie.tsx","components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","api/api.ts","App.tsx","index.tsx"],"names":["Errors","MovieCard","props","movie","className","src","Poster","alt","Title","Plot","MoviesList","movies","map","imdbID","API_URL","request","endpoint","a","fetch","response","json","FindMovie","addMovie","useState","query","setQuery","setMovie","Initial","queryError","setQueryError","handleQuery","useCallback","event","target","value","onFind","trim","findMovie","result","Response","NotFount","Required","onAdd","preventDefault","Find","onSubmit","htmlFor","type","id","placeholder","cn","onChange","onClick","App","setMovies","newMovie","some","alert","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7f7bc4cd.chunk.js","sourcesContent":["import cn from 'classnames';\nimport React, {\n  ChangeEvent,\n  FormEvent,\n  useCallback,\n  useState,\n} from 'react';\nimport { request } from '../../api/api';\nimport { MovieCard } from '../MovieCard';\nimport './FindMovie.scss';\n\ntype Props = {\n  addMovie: (x: Movie) => void;\n};\n\nenum Errors {\n  Initial = '',\n  NotFount = 'Can not find a movie with this title',\n  Required = 'Enter the title!',\n  Find = 'Find a movie for the first',\n}\n\nexport const FindMovie: React.FC<Props> = ({ addMovie }) => {\n  const [query, setQuery] = useState('');\n  const [movie, setMovie] = useState<Movie | null>(null);\n  const [queryError, setQueryError] = useState(Errors.Initial);\n\n  const handleQuery = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value);\n    setQueryError(Errors.Initial);\n  }, []);\n\n  const onFind = useCallback(() => {\n    if (!query.trim()) {\n      setQueryError(Errors.Required);\n    } else {\n      const findMovie = async () => {\n        const result = await request(query);\n\n        if (result.Response !== 'False') {\n          setMovie(result);\n          setQueryError(Errors.Initial);\n        } else {\n          setQueryError(Errors.NotFount);\n        }\n      };\n\n      findMovie();\n    }\n  }, [query]);\n\n  const onAdd = useCallback((event: FormEvent) => {\n    event.preventDefault();\n\n    if (!movie) {\n      setQueryError(Errors.Find);\n    }\n\n    if (!queryError && movie) {\n      addMovie(movie);\n      setMovie(null);\n      setQuery('');\n    }\n  }, [movie, queryError]);\n\n  return (\n    <>\n      <form\n        className=\"find-movie\"\n        onSubmit={onAdd}\n      >\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className={cn('input', { 'is-danger': queryError })}\n              value={query}\n              onChange={handleQuery}\n            />\n          </div>\n\n          {queryError && (\n            <p className=\"help is-danger\">\n              {queryError}\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              type=\"button\"\n              className=\"button is-light\"\n              onClick={onFind}\n            >\n              Find a movie\n            </button>\n          </div>\n\n          <div className=\"control\">\n            <button\n              type=\"submit\"\n              className=\"button is-primary\"\n            >\n              Add to the list\n            </button>\n          </div>\n        </div>\n      </form>\n\n      {movie && (\n        <div className=\"container\">\n          <h2 className=\"title\">Preview</h2>\n          <MovieCard\n            movie={movie}\n          />\n        </div>\n      )}\n    </>\n  );\n};\n","import React from 'react';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie;\n};\n\nexport const MovieCard: React.FC<Props> = (props) => {\n  const { movie } = props;\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-image\">\n        <figure className=\"image is-4by3\">\n          <img\n            src={movie.Poster}\n            alt=\"Film logo\"\n          />\n        </figure>\n      </div>\n      <div className=\"card-content\">\n        <div className=\"media\">\n          <div className=\"media-left\">\n            <figure className=\"image is-48x48\">\n              <img\n                src=\"images/imdb-logo.jpeg\"\n                alt=\"imdb\"\n              />\n            </figure>\n          </div>\n          <div className=\"media-content\">\n            <p className=\"title is-8\">{movie.Title}</p>\n          </div>\n        </div>\n\n        <div className=\"content\">\n          {movie.Plot}\n          <br />\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => {\n  return (\n    <div className=\"movies\">\n      {movies.map(movie => (\n        <MovieCard\n          key={movie.imdbID}\n          movie={movie}\n        />\n      ))}\n    </div>\n  );\n};\n","const myKey = '626f543c';\nconst API_URL = `https://www.omdbapi.com/?apikey=${myKey}`;\n\nexport const request = async (endpoint: string) => {\n  const response = await fetch(`${API_URL}&t=${endpoint}`);\n\n  return response.json();\n};\n","import { useCallback, useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\n\nexport const App: React.FC = () => {\n  const [movies, setMovies] = useState<Movie[] | []>([]);\n\n  const addMovie = useCallback((newMovie: Movie) => {\n    if (!movies.some(movie => movie.imdbID === newMovie.imdbID)) {\n      setMovies([...movies, newMovie]);\n    } else {\n      alert('Film is already in the list!'); // eslint-disable-line\n    }\n  }, [movies]);\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        {movies && (\n          <MoviesList\n            movies={movies}\n          />\n        )}\n      </div>\n      <div className=\"sidebar\">\n        <FindMovie\n          addMovie={addMovie}\n        />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}